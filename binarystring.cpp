#include<iostream>
using namespace std;
template<class T>
class Queue{ 
	private:
		T* array;
	public:
	    int head;
	    int tail;
		Queue(){
			array = new T[2000000];
			head =0;
			tail = 0;
		}
		
		bool empty(){
			if (tail== head){
				return true;
			}
			else{
				return false;
			}
		}
		int qsize(){
			return tail-head;
		}
		
		void enqueue(T x){
			array[tail] = x;
			tail++;
		}
		T dequeue(){
			if (!this -> empty()){
				T value = array[head];
				head++;
				return value;
			}      
			else{
				return NULL;
			}
		}
		T front(){
			if (!this -> empty()){
				return array[head];
		
			}   
			else{
				return NULL;
			}
		}	
	T rear(){
		if (!(this -> empty())){
			return array[tail-1];
		
			}   
		else{
			return NULL;
			}
		}
	
	};
int rem(string s,int num){
    int ans =0;
    for(int i=0;i<s.length();i++){
        
        ans=(((10%num)* (ans%num) % num) + ((s[i]-'0')%num ))%num;//since the number is generated by
                                                            //num = num*10 + s[i]

        
    }
    return ans;
}
string smallest_multiple(int s){
    
    Queue<string> q;
    
    q.enqueue("1");
    while(!q.empty()){
        string current = q.dequeue();
        if(rem(current,s)==0)
            return current;
       
            
        q.enqueue(current+"1");
        q.enqueue(current +"0");
        
        
    }
    return "404";


}

int main(){
    int input;
    cin>>input;
    cout<<smallest_multiple(input)<<"\n";
}